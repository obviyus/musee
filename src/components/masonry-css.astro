---
import type { GetImageResult } from "astro";

export interface SortedImage {
	original: GetImageResult;
	thumbnail: GetImageResult;
	date: Date;
	slug: string;
}

interface Props {
	images: SortedImage[];
}

const { images } = Astro.props;

// Helper function to distribute items into columns
function distributeIntoColumns(items: SortedImage[], columnCount: number) {
	const columns: SortedImage[][] = Array.from(
		{ length: columnCount },
		() => [],
	);

	// Distribute items horizontally (1,2,3,4 then 5,6,7,8)
	items.forEach((item, index) => {
		const columnIndex = index % columnCount;
		columns[columnIndex].push(item);
	});

	return columns;
}

// Create responsive column distributions
const breakpoints: ReadonlyArray<{ key: string; columns: number }> = [
	{ key: "mobile", columns: 1 },
	{ key: "sm", columns: 2 },
	{ key: "md", columns: 3 },
	{ key: "lg", columns: 4 },
	{ key: "xl", columns: 5 },
] as const;

const columnsByBreakpoint = Object.fromEntries(
	breakpoints.map(({ key, columns }) => [
		key,
		distributeIntoColumns(images, columns),
	]),
);
---

{
	breakpoints.map(({ key, columns }) => (
		<div class={`masonry-grid masonry-${key}`}>
			{(columnsByBreakpoint as any)[key].map(
				(column: SortedImage[], colIndex: number) => (
					<div class="masonry-column">
						{column.map((image, index) => {
							const thumbnailSrc = image.thumbnail.src as string;
							const width = image.thumbnail.attributes.width as number;
							const height = image.thumbnail.attributes.height as number;
							const globalIndex = colIndex + index * columns;

							return (
								<div
									class="masonry-item opacity-0"
									style={`animation-delay: ${(globalIndex % 5) * 0.05}s`}
								>
									<a
										href={`/${image.slug}`}
										aria-label={`View image ${image.slug}`}
									>
										<img
											src={thumbnailSrc}
											width={width}
											height={height}
											alt={`Thumbnail for ${image.slug}`}
											loading="lazy"
											decoding="async"
											class="transition-transform duration-300 ease-in-out hover:-translate-y-1 hover:scale-110 will-change-transform"
										/>
									</a>
								</div>
							);
						})}
					</div>
				),
			)}
		</div>
	))
}

<style>
	/* Hide all grids by default */
	.masonry-grid {
		display: none;
	}

	/* Flexbox-based masonry layout */
	.masonry-grid {
		display: flex;
		gap: 0;
	}

	.masonry-column {
		flex: 1;
		display: flex;
		flex-direction: column;
		gap: 0;
	}

	/* Show only the appropriate grid based on viewport */
	/* Mobile (default) */
	.masonry-mobile {
		display: flex;
	}

	/* Single column on mobile */
	.masonry-mobile .masonry-column {
		max-width: 100%;
	}

	/* Small screens (500px+) */
	@media (min-width: 500px) {
		.masonry-mobile {
			display: none;
		}
		.masonry-sm {
			display: flex;
		}
	}

	/* Medium screens (1000px+) */
	@media (min-width: 1000px) {
		.masonry-sm {
			display: none;
		}
		.masonry-md {
			display: flex;
		}
	}

	/* Large screens (1500px+) */
	@media (min-width: 1500px) {
		.masonry-md {
			display: none;
		}
		.masonry-lg {
			display: flex;
		}
	}

	/* Extra large screens (2000px+) */
	@media (min-width: 2000px) {
		.masonry-lg {
			display: none;
		}
		.masonry-xl {
			display: flex;
		}
	}

	/* Masonry item styling */
	.masonry-item {
		width: 100%;
		line-height: 0;
	}

	.masonry-item img {
		display: block;
	}

	/* Animation for fade-in effect */
	.masonry-item {
		animation: fadeIn 0.5s ease-out forwards;
	}

	@keyframes fadeIn {
		from {
			opacity: 0;
			transform: translateY(10px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}
</style>
