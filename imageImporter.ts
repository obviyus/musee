import Sqids from "sqids";

const sqids = new Sqids({
	minLength: 10,
	alphabet: "abcdefghijklmnopqrstuvwxyz",
});

async function generateImageList() {
	const imagesPath = "./src/assets/images/original";
	const targetFile = "./src/assets/images/imageList.ts";

	// Use Bun's glob to find images
	const glob = new Bun.Glob("**/*.{png,jpg,jpeg,webp}");
	const imageFiles = await Array.fromAsync(
		glob.scan({
			cwd: imagesPath,
			onlyFiles: true,
		}),
	);

	const esmImports: string[] = [];
	const imageMap: Record<string, string> = {};

	for (const image of imageFiles) {
		// Use Bun's built-in hasher
		const hasher = new Bun.CryptoHasher("blake2b256");
		hasher.update(image);
		const hash = hasher.digest();

		// Convert first 4 bytes to number for Sqids
		const hashNumber = new DataView(hash.buffer).getUint32(0, true);
		const readableId = sqids.encode([hashNumber]);

		esmImports.push(`import ${readableId} from "./original/${image}";`);
		imageMap[readableId] = readableId;
	}

	const imageListContent = `// This file is auto-generated by imageImporter.ts
// Do not edit this file directly
${esmImports.join("\n")}

const imageList: Record<string, ImageMetadata> = {\n${Object.entries(imageMap)
		.map(([key, value]) => `\t${key}: ${value},`)
		.join("\n")}\n};

export default imageList;
`;

	// Use Bun.write for file writing
	await Bun.write(targetFile, imageListContent);
}

// Run the generator
await generateImageList();
